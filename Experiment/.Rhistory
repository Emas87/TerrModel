mcts 7 2 170.91653871536255
mcts 0 3 89.62203454971313
mcts 7 3 165.77371430397034
rhea 6 2 105.60842061042786
mcts 3 2 114.67203521728516
rhea 4 2 77.33748483657837
rhea 5 2 66.428457736969
rhea 0 3 49.18642044067383
mcts 6 2 188.83019924163818
mcts 6 3 141.85840845108032
mcts 5 3 74.77298069000244
mcts 0 2 131.53040480613708
mcts 1 2 81.18489956855774
mcts 3 3 115.9804916381836
rhea 2 3 133.95507287979126
rhea 1 2 66.61156964302063
rhea 7 2 96.29975056648254
rhea 4 2 104.32942008972168
rhea 2 2 107.48337483406067
rhea 1 2 65.83313751220703
mcts 3 2 174.49970865249634
mcts 1 2 94.84573698043823
rhea 6 2 138.83185625076294
rhea 3 2 105.8466808795929
rhea 0 2 54.99426555633545
mcts 6 2 133.63238978385925
mcts 3 3 189.02281427383423
mcts 5 2 58.03930640220642
mcts 0 2 51.766671895980835
rhea 2 3 108.63765811920166
rhea 6 3 120.28362727165222
mcts 2 2 145.00633692741394
rhea 4 3 110.87477040290833
mcts 5 3 64.62694096565247
mcts 1 3 110.9574773311615
mcts 4 2 166.4997754096985
rhea 0 3 51.61681246757507
rhea 3 3 116.59962177276611
rhea 5 2 47.94415283203125
mcts 7 3 103.50526237487793
mcts 4 3 154.31737613677979
rhea 1 3 52.99504637718201
mcts 2 3 223.3491952419281
mcts 0 3 80.1494071483612
mcts 7 2 198.0874457359314
rhea 7 3 128.46753072738647
mcts 6 3 164.10403680801392
rhea 5 3 46.80270743370056
rhea 2 3 165.7538764476776
mcts 3 2 138.72960090637207
mcts 1 2 79.0133626461029
mcts 2 3 163.0355999469757
mcts 7 2 116.72412514686584
mcts 0 2 69.12873792648315
rhea 1 2 112.56045508384705
rhea 1 3 52.489279985427856
rhea 0 2 57.34534978866577
mcts 1 3 78.575190782547
rhea 5 2 49.88945770263672
rhea 0 3 54.58628296852112
rhea 6 2 102.02368497848511
rhea 4 3 96.42895293235779
rhea 7 2 114.07295989990234
mcts 6 3 218.23927974700928
rhea 2 2 136.72870659828186
mcts 4 2 127.27581214904785
mcts 6 2 150.94331693649292
rhea 3 3 85.88147354125977
mcts 5 2 53.99145221710205
mcts 3 3 180.6466314792633
rhea 5 3 53.271480321884155
rhea 6 3 124.38660168647766
mcts 5 3 63.5389838218689
mcts 0 3 98.62924766540527
rhea 4 2 91.53003478050232
rhea 7 3 125.14301490783691
mcts 4 3 135.36774849891663
mcts 2 2 169.8681173324585
rhea 3 2 93.41802859306335
mcts 7 3 169.60089874267578
")
# SE GENERA LA TABLA CON LOS DATOS Y SE ELIMINAN LOS DATOS CARGADOS
# DESDE EL ARCHIVO
data <- read.table(textConnection(datos), header = TRUE)
rm(datos)
#SE ORDENAN LOS DATOS
data$seed <- factor(data$seed, levels = unique(data$seed))
data$time <- factor(data$time, levels = unique(data$time))
data$algorithm <- factor(data$algorithm, levels = unique(data$algorithm))
#VERIFICAMOS QUE TODO ESTE BIEN
headtail(data)
summary(data)
str(data)
#SE GENERA EL GRAFICO SIMPLE DE INTERACCION
interaction.plot(x.factor = data$seed,
trace.factor = data$algorithm,
response = data$result,
fun = mean,
type = "b",
col = c("black", "red", "green"),
pch = c(19, 17, 15),
fixed = TRUE,
leg_bty = "o")
interaction.plot(x.factor = data$time,
trace.factor = data$algorithm,
response = data$result,
fun = mean,
type = "b",
col = c("black", "red", "green"),
pch = c(19, 17, 15),
fixed = TRUE,
leg_bty = "o")
# SE GENERA EL MODELO LINEAL DE LOS DATOS Y EL ANALISIS ANOVA
# model <- lm(result ~ seed + algorithm + seed:algorithm, data = data) # nolint
model <- lm(result ~ algorithm * seed * time, data = data)
options("contrasts")$alpha
options("contrasts")
$alpha
# SE GENERA EL MODELO LINEAL DE LOS DATOS Y EL ANALISIS ANOVA
# model <- lm(result ~ seed + algorithm + seed:algorithm, data = data) # nolint
model <- lm(result ~ algorithm * seed * time, data = data)
Anova(model, type = "II", alpha = 0.05)
# SE EVALUAN LOS SUPUESTOS DESPUES DE OBTENER EL MODELO LINEAL
# SE GENERA EL HISTOGRAMA DE RESIDUOS
x <- residuals(model)
plotNormalHistogram(x)
plot(fitted(model), residuals(model))
plot(model)
plot(fitted(model), residuals(model))
plot(model)
plotNormalHistogram(x)
plot(fitted(model), residuals(model))
plot(model)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$algorithm <- factor(sum$algorithm, levels = unique(sum$algorithm))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = algorithm,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$seed <- factor(sum$seed, levels = unique(sum$seed))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ algorithm + seed, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$seed <- factor(sum$seed, levels = unique(sum$seed))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs time in function of the algorithm
sum <- Summarize(result ~ time + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$time <- factor(sum$time, levels = unique(sum$time))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = time,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$seed <- factor(sum$seed, levels = unique(sum$seed))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
#sum$seed <- factor(sum$seed, levels = unique(sum$seed))
sum$seed <- factor(sum$seed, levels(sum$seed)[c(7,5,2,8,3,6,1,4)])
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs time in function of the algorithm
sum <- Summarize(result ~ time + algorithm, data = data, digits = 3)
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
#sum$seed <- factor(sum$seed, levels = unique(sum$seed))
sum$seed <- factor(sum$seed, levels(sum$seed)[c(7,5,2,8,3,6,1,4)])
sum
#sum$seed <- factor(sum$seed, levels = unique(sum$seed))
sum$seed <- factor(sum$seed, levels(sum$seed)[c(7,5,2,8,3,6,1,4)])
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
sum$seed <- factor(sum$seed, levels = unique(sum$seed))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$seed <- factor(sum$seed, levels(sum$seed)[c(7,5,2,8,3,6,1,4)])
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$seed <- factor(sum$seed, levels = unique(sum$seed))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(size = 20,face = "bold"),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none") +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Summarize mean result vs time in function of the algorithm
sum <- Summarize(result ~ time + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$time <- factor(sum$time, levels = unique(sum$time))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = time,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$seed <- factor(sum$seed, levels = unique(sum$seed))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(size = 20,face = "bold"),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none") +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Summarize mean result vs seed in function of the algorithm
sum <- Summarize(result ~ seed + algorithm, data = data, digits = 3)
sum$se <- sum$sd / sqrt(sum$n)
sum$se <- signif(sum$se, digits = 3)
sum
sum$seed <- factor(sum$seed, levels = unique(sum$seed))
#GRAFICO
pd <- position_dodge(.2)
plot <- ggplot(sum, aes(x = seed,
y = mean,
color = algorithm)) +
geom_errorbar(aes(ymin = mean - se,
ymax = mean + se),
width = 0.2,
size = 0.7, position = pd) +
geom_point(shape = 15, size = 4, position = pd) +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
scale_colour_manual(values = c("black", "red", "green")) +
ylab("result")
# Increase the font size to 20 (adjust as needed)
plot + theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.text = element_text(size = 20)) +
scale_size(guide = "none")
# POST-HOC
# SE HACE LA COMPARACION DE PARES DE LOS PROMEDIOS DE MINIMOS CUADRADOS
# DE CADA UNO DE LOS GRUPOS
marginal <- lsmeans(model, ~ algorithm)
pairs(marginal, adjust = "sidak")
# SE IDENTIFICAN LOS GRUPOS DIFERENTES EN LOS QUE SE CLASIFICAN LOS ALGORITMOS
# EN ESTUDIO
cld <- cld(marginal, alpha = 0.05, Letters = letters, adjust = "sidak")
cld
pairwise.t.test(data, data$algorithm), p.adjust.method = 'BH')
pairwise.t.test(data, data$algorithm, p.adjust.method = 'BH')
pairwise.t.test(data, algorithm, p.adjust.method = 'BH')
pairwise.t.test(data, data$algorithm, p.adjust.method = 'BH')
length(data)
length(data$algorithm)
pairwise.t.test(result, algorithm, p.adjust.method = 'BH')
pairwise.t.test(result, algorithm, p.adjust.method = 'BH')
pairwise.t.test(data$result, data$algorithm, p.adjust.method = 'BH')
pairwise.t.test(data$result, data$seed, p.adjust.method = 'BH')
pairwise.t.test(data$result, data$time, p.adjust.method = 'BH')
# POST-HOC
# SE HACE LA COMPARACION DE PARES DE LOS PROMEDIOS DE MINIMOS CUADRADOS
# DE CADA UNO DE LOS GRUPOS
marginal <- lsmeans(model, ~ algorithm)
pairs(marginal, adjust = "sidak")
# SE IDENTIFICAN LOS GRUPOS DIFERENTES EN LOS QUE SE CLASIFICAN LOS ALGORITMOS
# EN ESTUDIO
cld <- cld(marginal, alpha = 0.05, Letters = letters, adjust = "sidak")
cld
# seed
marginal <- lsmeans(model, ~ seed)
pairs(marginal, adjust = "sidak")
# SE IDENTIFICAN LOS GRUPOS DIFERENTES EN LOS QUE SE CLASIFICAN LOS seed
# EN ESTUDIO
cld <- cld(marginal, alpha = 0.05, Letters = letters, adjust = "sidak")
cld
pairwise.t.test(data$result, data$algorithm:data$seed, p.adjust.method = 'BH')
pairwise.t.test(data$result, data$algorithm:data$seed, p.adjust.method = 'BH')
pairwise.t.test(data$result, data$algorithm, p.adjust.method = 'BH')
pairwise.t.test(data$result, data$seed, p.adjust.method = 'BH')
pairwise.t.test(data$result, data$time, p.adjust.method = 'BH')
